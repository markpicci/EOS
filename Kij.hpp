/**
    This C++ code is the implementation of the analyses presented in the paper
    I.Bell and A. Jäger, "Helmholtz energy translations for common cubic equations of state
    for use in one-fluid and multi-fluid mixture models", J. Res. NIST, 2016

    This code is in the public domain, though if used in academic work, we would appreciate
    a reference back to the paper given above.

 */

//  **********  This code is preliminary, and will be updated.  **********
//  **********  Use only for beta testing.  **********

#ifndef K_CONTRIBUTION_H
#define K_CONTRIBUTION_H

#include <vector>
#include <string>
#include <map>
#include <cmath>

#include "MathUtil.h"
#include "DB.hpp"

extern DB db;

//=======================================================================
//
// Constant Kij class
//
//=======================================================================
class Kconst
{
public:
    Kconst(){};
    ~Kconst(){};

    void KijUnit(std::vector< std::vector<double> >& k){
        enum {N = 21}; //for set up as per AGA of ISO
        for(size_t i=0; i<N;i++) for(size_t j=0; j<N;j++) k[i][j] = 0.0;
        for(size_t i=0; i<N;i++) k[i][i] = 1.0;
    }

    void Kij(std::vector< std::vector<double> >& k){
            enum {N = 21}; //for set up as per AGA of ISO
            for(size_t i=0; i<N;i++) for(size_t j=0; j<N;j++) k[i][j] = 0.0;
                   //CH4,   N,     CO2,  C2H6,  C3H8, H2O, H2S, H2, CO,    O2, "iso-Butane", "n-Butane", "iso-Pentane", "n-Pentane", "n-Hexane", "n-Heptane", "n-Octane", "n-Nonane", "n-Decane", He, Ar
                   //0,     1,     2,    3,     4,    5,   6,   7,  8,     9,  10,           11,         12,            13,          14,         15,          16,         17,         18,        19, 20
            k[0]  = {0,     0.031, 0.12, 0,     0,     0,  0,   0,  0.03,  0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[1]  = {0.031, 0,    -0.02, 0.062, 0.085, 0,  0,   0,  0.012, 0,  0.103,        0.08, 0.092, 0.1, 0.08, 0.08, 0.08, 0.08, 0.08, 0, 0};
            k[2]  = {0.12, -0.02,  0,    0.12,  0.12,  0,  0,   0,  0.3,   0,  0.12,         0.12, 0.12, 0.12, 0.12, 0.1, 0.1, 0.1, 0.1, 0, 0};
            k[3]  = {0,     0.062, 0.12, 0,     0,     0,  0,   0,  0.026, 0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[4]  = {0,     0.085, 0.12, 0,     0,     0,  0,   0,  0.03,  0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[5]  = {0,     0,     0, 0, 0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[6]  = {0,     0,     0, 0, 0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[7]  = {0,     0,     0, 0, 0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[8]  = {0.03,  0.012, 0.3,  0.026, 0.03,  0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[9]  = {0,     0,     0,    0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[10] = {0,     0.103, 0.12, 0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[11] = {0,     0.08,  0.12, 0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[12] = {0,     0.092, 0.12, 0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[13] = {0,     0.1,   0.12, 0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[14] = {0,     0.08,  0.12, 0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[15] = {0,     0.08,  0.1,  0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[16] = {0,     0.08,  0.1,  0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[17] = {0,     0.08,  0.1,  0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[18] = {0,     0.08,  0.1,  0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[19] = {0,     0,     0,    0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
            k[20] = {0,     0,     0,    0,     0,     0,  0,   0,  0,     0,  0,            0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    };

};

//=======================================================================
//
// Group Method Contribution Kij
//
//=======================================================================
class Kcontribution
{
protected:
    enum {nSos = 21, Ng = 31}; //for set up as per AGA of ISO

    std::vector<std::vector<double>> kAi, //Ai data for group contribution
                                     kBi, //Bi data for group contribution
                                     sosGroup; //Contribution of each group for each substance

    std::vector<double> aii, // aii of peng robinson equation
                        bi, // bii of peng robinson equation
                        mii; // mii of peng robinson equation

    std::vector<double> Tc, ///< Vector of critical temperatures (in K)
                        Pc, ///< Vector of critical pressures (in Pa)
                        w; ///< Vector of acentric factors (unitless)

    double R; ///< The universal gas constant  in J/(mol*K)
    size_t N;
    //std::string gas[nSos]= {"Methane", "Nitrogen", "Carbon_dioxide", "Ethane", "Propane", "Water", "Hydrogen_sulfide", "Hydrogen", "Carbon_monoxide", "Oxygen",
    //                "iso-Butane", "n-Butane", "iso-Pentane", "n-Pentane", "n-Hexane", "n-Heptane", "n-Octane", "n-Nonane", "n-Decane", "Helium", "Argon"};

    std::vector<std::string> gas = {"74-82-8" ,        "7727-37-9",       "124-38-9",         "74-84-0",      "74-98-6",   "7732-18-5",
                                    "7783-06-4",        "1333-74-0",       "630-08-0",         "7782-44-7",
                                    "75-28-5",          "106-97-8",        "78-78-4",          "109-66-0",     "110-54-3",
                                    "142-82-5",         "111-65-9",        "111-84-2",         "124-18-5",     "7440-59-7", "7440-37-1"};
public:
    Kcontribution(){
        bool res;
        N = nSos;
        aii.resize(N, 0.0);
        bi.resize(N, 0.0);
        mii.resize(N, 0.0);

        Tc.resize(N, 0.0);
        Pc.resize(N, 0.0);
        w.resize(N, 0.0);

        kAi.resize(Ng, std::vector<double>(Ng, 0));
        kBi.resize(Ng, std::vector<double>(Ng, 0));
        sosGroup.resize(N, std::vector<double>(Ng, 0));
        R = 8.3160; // gas constant from Starling [m3 Pa / K mol]

        for(int i= 0; i < N; i++){
            Tc[i]       = std::any_cast<double>(db.get(gas[i], DB::Eq::GEN, DB::DataID::Tc,       res));
            Pc[i]       = std::any_cast<double>(db.get(gas[i], DB::Eq::GEN, DB::DataID::Pc,       res));
            w[i]        = std::any_cast<double>(db.get(gas[i], DB::Eq::GEN, DB::DataID::Acentric, res));
        }

        fillKij();
    };

    void Kij(const double T, std::vector< std::vector<double> >& k){
    std::vector<double> ai(nSos,0.0);

        // Update ai with Temperature
        for(size_t sosi=0; sosi<N; sosi++){
            ai[sosi] = aii[sosi]*pow2(1.0+mii[sosi]*(1.0-sqrt(T/Tc[sosi])));
        }

        // Calculate Kij
        double gcij;
        for(size_t si=0; si<N; si++)
            for(size_t sj=0; sj<N; sj++){
                k[si][sj] = 0.0;
                gcij = 0.0;

                for(size_t k=0; k<Ng; k++){
                    for(size_t l=0; l<Ng; l++){
                        double gr = (sosGroup[si][k]-sosGroup[sj][k])*(sosGroup[si][l]-sosGroup[sj][l]);
                        if(k!=l && kAi[k][l]!=0.0 && gr!=0.0){ //kAi[k][l]==0.0 data are not available
                            double num = gr * kAi[k][l]*pow(298.15/T, kBi[k][l]/kAi[k][l]-1.0);
                            gcij +=num;
                        }
                    }
                }

                double num = -0.5*gcij - pow2(sqrt(ai[si])/bi[si]-sqrt(ai[sj])/bi[sj]);
                num /= 2.0*sqrt(ai[si]*ai[sj])/(bi[si]*bi[sj]);
                k[si][sj] = num;
            }
        //matrixDump(k); //used for test
    }

    void fillKij(){

        // CH3 (GROUP 1) - CH2 (GROUP 2) - CH (GROUP 3) - C (GROUP 4) - CH4 (GROUP 5) - C2H6 (GROUP 6) - CHaro (GROUP 7) - Caro (GROUP 8) - C, aro-fused rings (GROUP 9) - CH2, cyclic (GROUP 10) - CH/C, cyclic (GROUP 11) - CO2 (GROUP 12) - N2 (GROUP 13) - H2S (GROUP 14) - SH (GROUP 15) - H2O (GROUP 16) - C2H4 (GROUP 17) - CH2/CH, alkenic (GROUP 18) - C, alkenic (GROUP 19) - CH/C, cycloalkenic (GROUP 20) - H2 (GROUP 21) - CO (GROUP 22) - He (GROUP 23) - Ar (GROUP 24) - SO2 (GROUP 25) - O2 (GROUP 26) - NO (GROUP 27) - COS (GROUP 28) - NH3 (GROUP 29) - NO2/N2O4 (GROUP 30) - N2O (GROUP 31)
        // kAi in MPa
        kAi[0]={0, 65.54, 214.9, 431.6, 28.48, 3.775, 98.83, 103.6, 624.9, 43.58, 293.4, 144.8, 38.09, 159.6, 789.6, 3557, 7.892, 48.73, 102.6, 47.01, 174, 91.24, 416.3, 11.27, 322.2, 86.1, 0, 0, 0, 0, 0};
        kAi[1]={65.54, 0, 39.05, 134.5, 37.75, 29.85, 25.05, 5.147, -17.84, 8.579, 63.48, 141.4, 83.73, 136.6, 439.9, 4324, 59.71, 9.608, 64.85, 34.31, 155.4, 44, 520.52, 113.6, 55.9, 107.4, 0, 0, 0, 0, 0};
        kAi[2]={214.9, 39.05, 0, -86.13, 131.4, 156.1, 56.62, 48.73, 0, 73.09, -120.8, 191.8, 383.6, 192.5, 374, 971.4, 147.9, 84.76, 91.62, 0, 326, 0, 728.1, 185.8, -70, 0, 0, 0, 0, 0, 0};
        kAi[3]={431.6, 134.5, -86.13, 0, 309.5, 388.1, 170.5, 128.3, 0, 208.6, 25.05, 377.5, 341.8, 330.8, 685.9, 0, 366.8, 181.2, 0, 0, 548.3, 0, 0, 899, 0, 0, 0, 0, 0, 0, 0};
        kAi[4]={28.48, 37.75, 131.4, 309.5, 0, 9.951, 67.26, 106.7, 249.1, 33.97, 188, 134.9, 30.88, 181.9, 701.7, 2265, 19.22, 48.73, 0, 0, 156.1, 14.43, 394.5, 15.97, 205.89, 0, 0, 44.61, 436.14, 0, 74.81};
        kAi[5]={3.775, 29.85, 156.1, 388.1, 9.951, 0, 41.18, 67.94, 0, 12.7, 118, 136.2, 61.59, 157.2, 0, 2333, 7.549, 26.77, 0, 0, 137.6, 15.42, 581.3, 43.81, 0, 0, 0, 0, 0, 0, 0};
        kAi[6]={98.83, 25.05, 56.62, 170.5, 67.26, 41.18, 0, -16.47, 52.5, 28.82, 129, 98.48, 185.3, 21.28, 277.6, 2268, 25.74, 9.951, -16.47, 3.775, 288.9, 153.4, 753.6, 195.6, 37.1, 233.4, 0, 0, 0, 0, 0};
        kAi[7]={103.6, 5.147, 48.73, 128.3, 106.7, 67.94, -16.47, 0, -328, 37.4, -99.17, 154.4, 343.8, 9.608, 1002, 543.5, 97.8, -48.38, 343.1, 242.9, 400.1, 125.77, 753.6, 0, -196.6, 177.1, 0, 0, 0, 0, 0};
        kAi[8]={624.9, -17.84, 0, 0, 249.1, 0, 52.5, -328, 0, 140.7, -99.17, 331.1, 702.4, 9.608, 1002, 1340, 209.7, 669.8, 0, 0, 602.9, 197, 753.6, 0, 0, 0, 0, 0, 0, 0, 0};
        kAi[9]={43.58, 8.579, 73.09, 208.6, 33.97, 12.7, 28.82, 37.4, 140.7, 0, 139, 144.1, 179.5, 117.4, 493.1, 4211, 35.34, -15.44, 159.6, 31.91, 236.1, 113.1, 0, 1269, 0, 181.2, -27.5, 0, 0, 0, 0};
        kAi[10]={293.4, 63.48, -120.8, 25.05, 188, 118, 129, -99.17, -99.17, 139, 0, 216.2, 331.5, 71.37, 463.2, 244, 297.2, 260.1, 0, 151.3, -51.82, 0, 0, 0, 0, 102.3, 0, 0, 0, 0, 0};
        kAi[11]={144.8, 141.4, 191.8, 377.5, 134.9, 136.2, 98.48, 154.4, 331.1, 144.1, 216.2, 0, 113.92, 135.2, 0, 559.3, 73.09, 60.74, 74.81, 87.85, 261.13, 87.85, 685.9, 177.75, 54.9, 154.42, 5.1, 83.04, 0, 124.91, 3.77};
        kAi[12]={38.09, 83.73, 383.6, 341.8, 30.88, 61.59, 185.3, 343.8, 702.4, 179.5, 331.5, 113.92, 0, 319.5, 0, 2574, 45.3, 59.71, 541.5, 0, 65.2, 23.33, 204.7, 6.488, 282.4, 2.4, 258.73, 0, 585.75, 263.54, 101.57};
        kAi[13]={159.6, 136.6, 192.5, 330.8, 181.9, 157.2, 21.28, 9.608, 9.608, 117.4, 71.37, 135.2, 319.5, 0, -157.8, 603.94, 0, 0, 0, 0, 145.84, 278.63, 0, 0, 0, 0, 0, 101.91, 0, 0, 0};
        kAi[14]={789.6, 439.9, 374, 685.9, 701.7, 0, 277.6, 1002, 1002, 493.1, 463.2, 0, 0, -157.8, 0, 30.88, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        kAi[15]={3557, 4324, 971.4, 0, 2265, 2333, 2268, 543.5, 1340, 4211, 244, 559.3, 2574, 603.94, 30.88, 0, 1650, 2243, 0, 0, 830.76, 278.63, 0, 0, 374.4, 1376, 0, 0, -550.06, 0, 568.94};
        kAi[16]={7.892, 59.71, 147.9, 366.8, 19.22, 7.549, 25.74, 97.8, 209.7, 35.34, 297.2, 73.09, 45.3, 0, 0, 1650, 0, 14.76, -518, -98.8, 151.3, 84.55, 569.6, 0, 0, 0, 0, 0, 0, 0, 0};
        kAi[17]={48.73, 9.608, 84.76, 181.2, 48.73, 26.77, 9.951, -48.38, 669.8, -15.44, 260.1, 60.74, 59.71, 0, 0, 2243, 14.76, 0, 24.71, 14.07, 175.7, 0, 644.3, 203, 26.8, 0, 0, 0, 0, 0, 0};
        kAi[18]={102.6, 64.85, 91.62, 0, 0, 0, -16.47, 343.1, 0, 159.6, 0, 74.81, 541.5, 0, 0, 0, -518, 24.71, 0, 23.68, 621.4, 0, 0, 0, -141, 0, 0, 0, 0, 0, 0};
        kAi[19]={47.01, 34.31, 0, 0, 0, 0, 3.775, 242.9, 0, 31.91, 151.3, 87.85, 0, 0, 0, 0, -98.8, 14.07, 23.68, 0, 460.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        kAi[20]={174, 155.4, 326, 548.3, 156.1, 137.6, 288.9, 400.1, 602.9, 236.1, -51.82, 261.13, 65.2, 145.84, 0, 830.76, 151.3, 175.7, 621.4, 460.8, 0, 75.84, 138.7, 128.2, 0, 0, 0, 0, 701.73, 0, 0};
        kAi[21]={91.24, 44, 0, 0, 14.43, 15.42, 153.4, 125.77, 197, 113.1, 0, 87.85, 23.33, 278.63, 0, 278.63, 84.55, 0, 0, 0, 75.84, 0, 260.1, 4.042, 0, 0, 309.17, 0, 0, 0, 0};
        kAi[22]={416.3, 520.52, 728.1, 0, 394.5, 581.3, 753.6, 753.6, 753.6, 0, 0, 685.9, 204.7, 0, 0, 0, 569.6, 644.3, 0, 0, 138.7, 260.1, 0, 243.1, 0, 0, 0, 0, 0, 0, 0};
        kAi[23]={11.27, 113.6, 185.8, 899, 15.97, 43.81, 195.6, 0, 0, 1269, 0, 177.75, 6.488, 0, 0, 0, 0, 203, 0, 0, 128.2, 4.042, 243.1, 0, 299.91, 4.8, 110.84, 0, 630.02, 278.63, 0};
        kAi[24]={322.2, 55.9, -70, 0, 205.89, 0, 37.1, -196.6, 0, 0, 0, 54.9, 282.4, 0, 0, 374.4, 0, 26.8, -141, 0, 0, 0, 0, 299.91, 0, 339.94, 172.26, 0, 0, 0, 0};
        kAi[25]={86.1, 107.4, 0, 0, 0, 0, 233.4, 177.1, 0, 181.2, 102.3, 154.42, 2.4, 0, 0, 1376, 0, 0, 0, 0, 0, 0, 0, 4.8, 339.94, 0, 0, 0, 0, 271.09, 120.1};
        kAi[26]={0, 0, 0, 0, 0, 0, 0, 0, 0, -27.5, 0, 5.1, 258.73, 0, 0, 0, 0, 0, 0, 0, 0, 309.17, 0, 110.84, 172.26, 0, 0, 0, 0, 0, 0};
        kAi[27]={0, 0, 0, 0, 44.61, 0, 0, 0, 0, 0, 0, 83.04, 0, 101.91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        kAi[28]={0, 0, 0, 0, 436.14, 0, 0, 0, 0, 0, 0, 0, 585.75, 0, 0, -550.06, 0, 0, 0, 0, 701.73, 0, 0, 630.02, 0, 0, 0, 0, 0, 0, 0};
        kAi[29]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124.91, 263.54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 278.63, 0, 271.09, 0, 0, 0, 0, 0};
        kAi[30]={0, 0, 0, 0, 74.81, 0, 0, 0, 0, 0, 0, 3.77, 101.57, 0, 0, 568.94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120.1, 0, 0, 0, 0, 0};
        //bool test = checkSymmetric(kAi);
        // kBi in MPa
        kBi[0]={0, 105.7, 249.9, 575, 20.25, 8.922, 136.2, 103.6, 774.1, 60.05, 170.9, 401.5, 88.19, 227.8, 1829, 11195, 35, 44.27, 260.1, 169.5, 239.5, 94.24, 513.4, 55.48, 201.4, 87.5, 0, 0, 0, 0, 0};
        kBi[1]={105.7, 0, 41.59, 183.9, 74.81, 65.88, 64.51, -7.549, -4.118, 27.79, -74.46, 237.1, 188.7, 124.6, 504.8, 12126, 82.35, 50.79, 51.82, 51.13, 240.9, 45.55, 673.22, 231.6, -28.5, 200.8, 0, 0, 0, 0, 0};
        kBi[2]={249.9, 41.59, 0, 85.1, 157.5, 96.77, 129.7, -89.22, 0, 71.37, 18.53, 380.9, 375.4, 562.8, 520.9, 567.6, -55.59, 193.2, 54.9, 0, 287.9, 0, 750.9, 634.2, 233.7, 0, 0, 0, 0, 0, 0};
        kBi[3]={575, 183.9, 85.1, 0, 35.69, -224.8, 284.1, 189.1, 0, 294.4, 81.33, 162.7, 635.2, -297.2, 1547, 0, -219.3, 419, 0, 0, 2343, 0, 0, 4655, 0, 0, 0, 0, 0, 0, 0};
        kBi[4]={20.25, 74.81, 157.5, 35.69, 0, 13.37, 167.5, 190.8, 408.3, 5.49, 473.9, 214.81, 37.06, 307.46, 1318, 4719.63, 33.29, 68.29, 0, 0, 92.99, 20.92, 378.1, 24.48, 323.59, 0, 0, -95.05, 958.75, 0, 107.06};
        kBi[5]={8.922, 65.88, 96.77, -224.8, 13.37, 0, 50.79, 210.7, 0, 73.43, -212.8, 235.7, 84.92, 217.1, 0, 5147, 20.93, -5.147, 0, 0, 150, 33.3, 517.1, 53.1, 0, 0, 0, 0, 0, 0, 0};
        kBi[6]={136.2, 64.51, 129.7, 284.1, 167.5, 50.79, 0, 16.47, 251.2, 65.54, 36.72, 253.6, 490.7, 6.177, 449.5, 62.18, 78.92, 19.9, 61.42, 1.716, 189.1, 153.4, 590.5, 361.3, -23.7, 404.9, 0, 0, 0, 0, 0};
        kBi[7]={103.6, -7.549, -89.22, 189.1, 190.8, 210.7, 16.47, 0, -569.3, 53.53, -193.5, 374.4, 1712, -36.72, -736.4, 411.8, 67.94, 27.79, 880.2, -7.206, 1201, -231.1, 590.5, 0, -397.4, 2559.4, 0, 0, 0, 0, 0};
        kBi[8]={774.1, -4.118, 0, 0, 408.3, 0, 251.2, -569.3, 0, 277.6, -193.5, 276.6, 1889, -36.72, -736.4, -65.88, 3819, 589.5, 0, 0, 1463, -238.8, 590.5, 0, 0, 0, 0, 0, 0, 0, 0};
        kBi[9]={60.05, 27.79, 71.37, 294.4, 5.49, 73.43, 65.54, 53.53, 277.6, 0, 35.69, 354.1, 546.6, 166.4, 832.1, 13031, 52.5, 24.36, 140.7, 69.32, 192.5, 143.6, 0, 18666, 0, 281.4, 50.1, 0, 0, 0, 0};
        kBi[10]={170.9, -74.46, 18.53, 81.33, 473.9, -212.8, 36.72, -193.5, -193.5, 35.69, 0, -132.8, 389.8, -127.7, -337.7, -60.39, -647.2, 134.9, 0, 2.745, 34.31, 0, 0, 0, 0, 988, 0, 0, 0, 0, 0};
        kBi[11]={401.5, 237.1, 380.9, 162.7, 214.81, 235.7, 253.6, 374.4, 276.6, 354.1, -132.8, 0, 212.41, 199.02, 0, 277.95, 106.7, 183.9, -266.6, 66.91, 300.94, 190.79, 559.3, 86.82, 59.02, 109.81, 48.38, 165.74, 0, 241.57, 14.07};
        kBi[12]={88.19, 188.7, 375.4, 635.2, 37.06, 84.92, 490.7, 1712, 1889, 546.6, 389.8, 212.41, 0, 550.06, 0, 5490.33, 92.65, 227.2, 94.71, 0, 70.1, -25.4, 222.8, 8.77, 362.71, 4.8, 100.54, 0, 1011.25, 255.99, 230.94};
        kBi[13]={227.8, 124.6, 562.8, -297.2, 307.46, 217.1, 6.177, -36.72, -36.72, 166.4, -127.7, 199.02, 550.06, 0, 153.7, 599.13, 0, 0, 0, 0, 823.55, 404.23, 0, 0, 0, 0, 0, 98.14, 0, 0, 0};
        kBi[14]={1829, 504.8, 520.9, 1547, 1318, 0, 449.5, -736.4, -736.4, 832.1, -337.7, 0, 0, 153.7, 0, -113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        kBi[15]={11195, 12126, 567.6, 0, 4719.63, 5147, 62.18, 411.8, -65.88, 13031, -60.39, 277.95, 5490.33, 599.13, -113, 0, 1661, 5199, 0, 0, -137.94, -89.9, 0, 1211.3, 148.58, 1609.35, 0, 0, -1404.15, 0, -144.81};
        kBi[16]={35, 82.35, -55.59, -219.3, 33.29, 20.93, 78.92, 67.94, 3819, 52.5, -647.2, 106.7, 92.65, 0, 0, 1661, 0, 11.32, 6815, 1809, 165.1, -7.51, 536.7, 0, 0, 0, 0, 0, 0, 0, 0};
        kBi[17]={44.27, 50.79, 193.2, 419, 68.29, -5.147, 19.9, 27.79, 589.5, 24.36, 134.9, 183.9, 227.2, 0, 0, 5199, 11.32, 0, 121.8, -12.3, 373, 0, 687.7, -11.7, 26.8, 0, 0, 0, 0, 0, 0};
        kBi[18]={260.1, 51.82, 54.9, 0, 0, 0, 61.42, 880.2, 0, 140.7, 0, -266.6, 94.71, 0, 0, 0, 6815, 121.8, 0, 87.5, 873.6, 0, 0, 0, -151, 0, 0, 0, 0, 0, 0};
        kBi[19]={169.5, 51.13, 0, 0, 0, 0, 1.716, -7.206, 0, 69.32, 2.745, 66.91, 0, 0, 0, 0, 1809, -12.3, 87.5, 0, 2167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        kBi[20]={239.5, 240.9, 287.9, 2343, 92.99, 150, 189.1, 1201, 1463, 192.5, 34.31, 300.94, 70.1, 823.55, 0, -137.94, 165.1, 373, 873.6, 2167, 0, 74.81, 95.49, 102.9, 0, 0, 0, 0, 931.3, 0, 0};
        kBi[21]={94.24, 45.55, 0, 0, 20.92, 33.3, 153.4, -231.1, -238.8, 143.6, 0, 190.79, -25.4, 404.23, 0, -89.9, -7.51, 0, 0, 0, 74.81, 0, 259.9, 8.18, 0, 0, 28.82, 0, 0, 0, 0};
        kBi[22]={513.4, 673.22, 750.9, 0, 378.1, 517.1, 590.5, 590.5, 590.5, 0, 0, 559.3, 222.8, 0, 0, 0, 536.7, 687.7, 0, 0, 95.49, 259.9, 0, 305.6, 0, 0, 0, 0, 0, 0, 0};
        kBi[23]={55.48, 231.6, 634.2, 4655, 24.48, 53.1, 361.3, 0, 0, 18666, 0, 86.82, 8.77, 0, 0, 1211.3, 0, -11.7, 0, 0, 102.9, 8.18, 305.6, 0, 354.13, 7.89, 155.45, 0, 1793.97, 274.52, 0};
        kBi[24]={201.4, -28.5, 233.7, 0, 323.59, 0, -23.7, -397.4, 0, 0, 0, 59.02, 362.71, 0, 0, 148.58, 0, 26.8, -151, 0, 0, 0, 0, 354.13, 0, 665.7, 1343, 0, 0, 0, 0};
        kBi[25]={87.5, 200.8, 0, 0, 0, 0, 404.9, 2559.4, 0, 281.4, 988, 109.81, 4.8, 0, 0, 1609.35, 0, 0, 0, 0, 0, 0, 0, 7.89, 665.7, 0, 0, 0, 0, 362.36, 105.69};
        kBi[26]={0, 0, 0, 0, 0, 0, 0, 0, 0, 50.1, 0, 48.38, 100.54, 0, 0, 0, 0, 0, 0, 0, 0, 28.82, 0, 155.45, 1343, 0, 0, 0, 0, 0, 0};
        kBi[27]={0, 0, 0, 0, -95.05, 0, 0, 0, 0, 0, 0, 165.74, 0, 98.14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        kBi[28]={0, 0, 0, 0, 958.75, 0, 0, 0, 0, 0, 0, 0, 1011.25, 0, 0, -1404.15, 0, 0, 0, 0, 931.3, 0, 0, 1793.97, 0, 0, 0, 0, 0, 0, 0};
        kBi[29]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241.57, 255.99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 274.52, 0, 362.36, 0, 0, 0, 0, 0};
        kBi[30]={0, 0, 0, 0, 107.06, 0, 0, 0, 0, 0, 0, 14.07, 230.94, 0, 0, -144.81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105.69, 0, 0, 0, 0, 0};
        //test = checkSymmetric(kBi);

        sosGroup[0] ={0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[1] ={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[2] ={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[3] ={0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[4] ={2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[5] ={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[6] ={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[7] ={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[8] ={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[9] ={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0};
        sosGroup[10]={3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[11]={2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[12]={3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[13]={2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[14]={2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[15]={2, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[16]={2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[17]={2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[18]={2, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[19]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0};
        sosGroup[20]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0};

        //calculate the number of group and occurrence in sustance
        for(size_t sosi=0; sosi<N; sosi++){
            double tot = 0;
            for(size_t groupi=0; groupi<Ng; groupi++) tot+=sosGroup[sosi][groupi]; // Calculate the total number of group
            for(size_t groupi=0; groupi<Ng; groupi++) sosGroup[sosi][groupi]/=tot;
        }

        //calculate aii, bii, mii of Peng Robinson for binary interaction use
        for(size_t sosi=0; sosi<N; sosi++){
            if (w[sosi]<=0.491) {
                mii[sosi]=0.37464+1.54226*w[sosi]-0.26992*w[sosi]*w[sosi];
            } else { mii[sosi]=0.379642+1.48503*w[sosi]-0.164423*w[sosi]*w[sosi]+0.016666*w[sosi]*w[sosi]*w[sosi];}

            aii[sosi] = 0.457235529*R*R*Tc[sosi]*Tc[sosi]/Pc[sosi];
            bi[sosi] = 0.0777960739*R*Tc[sosi]/Pc[sosi];
        }
    }
};

#endif
